// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`extra::CreateMyType > has the expected shape 1`] = `
{
  "createdAt": ZodNullable {
    "_def": {
      "innerType": ZodISODateTime {
        "_def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "_zod": {
          "check": [Function],
          "computed": {
            "format": "datetime",
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          },
          "constr": [Function],
          "def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "deferred": [],
          "id": "string_ytcffhgsos",
          "onattach": [Function],
          "parse": [Function],
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "run": [Function],
          "traits": Set {
            "ZodISODateTime",
            "$ZodISODateTime",
            "$ZodStringFormat",
            "$ZodCheckStringFormat",
            "$ZodCheck",
            "$ZodString",
            "$ZodType",
            "ZodStringFormat",
            "ZodString",
            "ZodType",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "base64": [Function],
        "base64url": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "cidrv4": [Function],
        "cidrv6": [Function],
        "clone": [Function],
        "cuid": [Function],
        "cuid2": [Function],
        "date": [Function],
        "datetime": [Function],
        "def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "default": [Function],
        "describe": [Function],
        "duration": [Function],
        "e164": [Function],
        "email": [Function],
        "emoji": [Function],
        "endsWith": [Function],
        "format": "datetime",
        "guid": [Function],
        "includes": [Function],
        "ipv4": [Function],
        "ipv6": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "jwt": [Function],
        "ksuid": [Function],
        "length": [Function],
        "lowercase": [Function],
        "max": [Function],
        "maxLength": null,
        "meta": [Function],
        "min": [Function],
        "minLength": null,
        "nanoid": [Function],
        "nonempty": [Function],
        "nonoptional": [Function],
        "normalize": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "regex": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "startsWith": [Function],
        "superRefine": [Function],
        "time": [Function],
        "toLowerCase": [Function],
        "toUpperCase": [Function],
        "transform": [Function],
        "trim": [Function],
        "ulid": [Function],
        "uppercase": [Function],
        "url": [Function],
        "uuid": [Function],
        "uuidv4": [Function],
        "uuidv6": [Function],
        "uuidv7": [Function],
        "xid": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "_zod": {
      "computed": {},
      "constr": [Function],
      "def": {
        "innerType": ZodISODateTime {
          "_def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "_zod": {
            "check": [Function],
            "computed": {
              "format": "datetime",
              "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            },
            "constr": [Function],
            "def": {
              "check": "string_format",
              "format": "datetime",
              "local": false,
              "offset": true,
              "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
              "precision": null,
              "type": "string",
            },
            "deferred": [],
            "id": "string_ytcffhgsos",
            "onattach": [Function],
            "parse": [Function],
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "run": [Function],
            "traits": Set {
              "ZodISODateTime",
              "$ZodISODateTime",
              "$ZodStringFormat",
              "$ZodCheckStringFormat",
              "$ZodCheck",
              "$ZodString",
              "$ZodType",
              "ZodStringFormat",
              "ZodString",
              "ZodType",
            },
            "version": {
              "major": 0,
              "minor": 5,
              "patch": 0,
            },
          },
          "and": [Function],
          "array": [Function],
          "base64": [Function],
          "base64url": [Function],
          "brand": [Function],
          "catch": [Function],
          "check": [Function],
          "cidrv4": [Function],
          "cidrv6": [Function],
          "clone": [Function],
          "cuid": [Function],
          "cuid2": [Function],
          "date": [Function],
          "datetime": [Function],
          "def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "default": [Function],
          "describe": [Function],
          "duration": [Function],
          "e164": [Function],
          "email": [Function],
          "emoji": [Function],
          "endsWith": [Function],
          "format": "datetime",
          "guid": [Function],
          "includes": [Function],
          "ipv4": [Function],
          "ipv6": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "jwt": [Function],
          "ksuid": [Function],
          "length": [Function],
          "lowercase": [Function],
          "max": [Function],
          "maxLength": null,
          "meta": [Function],
          "min": [Function],
          "minLength": null,
          "nanoid": [Function],
          "nonempty": [Function],
          "nonoptional": [Function],
          "normalize": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "overwrite": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "readonly": [Function],
          "refine": [Function],
          "regex": [Function],
          "register": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "startsWith": [Function],
          "superRefine": [Function],
          "time": [Function],
          "toLowerCase": [Function],
          "toUpperCase": [Function],
          "transform": [Function],
          "trim": [Function],
          "ulid": [Function],
          "uppercase": [Function],
          "url": [Function],
          "uuid": [Function],
          "uuidv4": [Function],
          "uuidv6": [Function],
          "uuidv7": [Function],
          "xid": [Function],
          "~standard": {
            "validate": [Function],
            "vendor": "zod",
            "version": 1,
          },
        },
        "type": "nullable",
      },
      "deferred": [
        [Function],
        [Function],
      ],
      "id": "nullable_ikdmgosvxv",
      "parse": [Function],
      "pattern": /\\^\\(\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\|null\\)\\$/,
      "qin": undefined,
      "qout": undefined,
      "run": [Function],
      "traits": Set {
        "ZodNullable",
        "$ZodNullable",
        "$ZodType",
        "ZodType",
      },
      "version": {
        "major": 0,
        "minor": 5,
        "patch": 0,
      },
    },
    "and": [Function],
    "array": [Function],
    "brand": [Function],
    "catch": [Function],
    "check": [Function],
    "clone": [Function],
    "def": {
      "innerType": ZodISODateTime {
        "_def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "_zod": {
          "check": [Function],
          "computed": {
            "format": "datetime",
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          },
          "constr": [Function],
          "def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "deferred": [],
          "id": "string_ytcffhgsos",
          "onattach": [Function],
          "parse": [Function],
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "run": [Function],
          "traits": Set {
            "ZodISODateTime",
            "$ZodISODateTime",
            "$ZodStringFormat",
            "$ZodCheckStringFormat",
            "$ZodCheck",
            "$ZodString",
            "$ZodType",
            "ZodStringFormat",
            "ZodString",
            "ZodType",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "base64": [Function],
        "base64url": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "cidrv4": [Function],
        "cidrv6": [Function],
        "clone": [Function],
        "cuid": [Function],
        "cuid2": [Function],
        "date": [Function],
        "datetime": [Function],
        "def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "default": [Function],
        "describe": [Function],
        "duration": [Function],
        "e164": [Function],
        "email": [Function],
        "emoji": [Function],
        "endsWith": [Function],
        "format": "datetime",
        "guid": [Function],
        "includes": [Function],
        "ipv4": [Function],
        "ipv6": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "jwt": [Function],
        "ksuid": [Function],
        "length": [Function],
        "lowercase": [Function],
        "max": [Function],
        "maxLength": null,
        "meta": [Function],
        "min": [Function],
        "minLength": null,
        "nanoid": [Function],
        "nonempty": [Function],
        "nonoptional": [Function],
        "normalize": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "regex": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "startsWith": [Function],
        "superRefine": [Function],
        "time": [Function],
        "toLowerCase": [Function],
        "toUpperCase": [Function],
        "transform": [Function],
        "trim": [Function],
        "ulid": [Function],
        "uppercase": [Function],
        "url": [Function],
        "uuid": [Function],
        "uuidv4": [Function],
        "uuidv6": [Function],
        "uuidv7": [Function],
        "xid": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "default": [Function],
    "describe": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "meta": [Function],
    "nonoptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "or": [Function],
    "overwrite": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "pipe": [Function],
    "readonly": [Function],
    "refine": [Function],
    "register": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
    "unwrap": [Function],
    "~standard": {
      "validate": [Function],
      "vendor": "zod",
      "version": 1,
    },
  },
  "enumTest": ZodNullable {
    "_def": {
      "innerType": ZodEnum {
        "_def": {
          "entries": {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
          },
          "type": "enum",
        },
        "_zod": {
          "computed": {},
          "constr": [Function],
          "def": {
            "entries": {
              "1": "1",
              "2": "2",
              "3": "3",
              "4": "4",
              "5": "5",
            },
            "type": "enum",
          },
          "deferred": [
            [Function],
            [Function],
          ],
          "id": "enum_vmerkjjqsq",
          "parse": [Function],
          "pattern": /\\^\\(1\\|2\\|3\\|4\\|5\\)\\$/,
          "run": [Function],
          "traits": Set {
            "ZodEnum",
            "$ZodEnum",
            "$ZodType",
            "ZodType",
          },
          "values": Set {
            "1",
            "2",
            "3",
            "4",
            "5",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "clone": [Function],
        "def": {
          "entries": {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
          },
          "type": "enum",
        },
        "default": [Function],
        "describe": [Function],
        "enum": {
          "1": "1",
          "2": "2",
          "3": "3",
          "4": "4",
          "5": "5",
        },
        "exclude": [Function],
        "extract": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "meta": [Function],
        "nonoptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "options": [
          "1",
          "2",
          "3",
          "4",
          "5",
        ],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "_zod": {
      "computed": {},
      "constr": [Function],
      "def": {
        "innerType": ZodEnum {
          "_def": {
            "entries": {
              "1": "1",
              "2": "2",
              "3": "3",
              "4": "4",
              "5": "5",
            },
            "type": "enum",
          },
          "_zod": {
            "computed": {},
            "constr": [Function],
            "def": {
              "entries": {
                "1": "1",
                "2": "2",
                "3": "3",
                "4": "4",
                "5": "5",
              },
              "type": "enum",
            },
            "deferred": [
              [Function],
              [Function],
            ],
            "id": "enum_vmerkjjqsq",
            "parse": [Function],
            "pattern": /\\^\\(1\\|2\\|3\\|4\\|5\\)\\$/,
            "run": [Function],
            "traits": Set {
              "ZodEnum",
              "$ZodEnum",
              "$ZodType",
              "ZodType",
            },
            "values": Set {
              "1",
              "2",
              "3",
              "4",
              "5",
            },
            "version": {
              "major": 0,
              "minor": 5,
              "patch": 0,
            },
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "check": [Function],
          "clone": [Function],
          "def": {
            "entries": {
              "1": "1",
              "2": "2",
              "3": "3",
              "4": "4",
              "5": "5",
            },
            "type": "enum",
          },
          "default": [Function],
          "describe": [Function],
          "enum": {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
          },
          "exclude": [Function],
          "extract": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "meta": [Function],
          "nonoptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "options": [
            "1",
            "2",
            "3",
            "4",
            "5",
          ],
          "or": [Function],
          "overwrite": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "readonly": [Function],
          "refine": [Function],
          "register": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
          "~standard": {
            "validate": [Function],
            "vendor": "zod",
            "version": 1,
          },
        },
        "type": "nullable",
      },
      "deferred": [
        [Function],
        [Function],
      ],
      "id": "nullable_nnyzuenikq",
      "parse": [Function],
      "pattern": /\\^\\(\\(1\\|2\\|3\\|4\\|5\\)\\|null\\)\\$/,
      "qin": undefined,
      "qout": undefined,
      "run": [Function],
      "traits": Set {
        "ZodNullable",
        "$ZodNullable",
        "$ZodType",
        "ZodType",
      },
      "values": Set {
        "1",
        "2",
        "3",
        "4",
        "5",
        null,
      },
      "version": {
        "major": 0,
        "minor": 5,
        "patch": 0,
      },
    },
    "and": [Function],
    "array": [Function],
    "brand": [Function],
    "catch": [Function],
    "check": [Function],
    "clone": [Function],
    "def": {
      "innerType": ZodEnum {
        "_def": {
          "entries": {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
          },
          "type": "enum",
        },
        "_zod": {
          "computed": {},
          "constr": [Function],
          "def": {
            "entries": {
              "1": "1",
              "2": "2",
              "3": "3",
              "4": "4",
              "5": "5",
            },
            "type": "enum",
          },
          "deferred": [
            [Function],
            [Function],
          ],
          "id": "enum_vmerkjjqsq",
          "parse": [Function],
          "pattern": /\\^\\(1\\|2\\|3\\|4\\|5\\)\\$/,
          "run": [Function],
          "traits": Set {
            "ZodEnum",
            "$ZodEnum",
            "$ZodType",
            "ZodType",
          },
          "values": Set {
            "1",
            "2",
            "3",
            "4",
            "5",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "clone": [Function],
        "def": {
          "entries": {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
          },
          "type": "enum",
        },
        "default": [Function],
        "describe": [Function],
        "enum": {
          "1": "1",
          "2": "2",
          "3": "3",
          "4": "4",
          "5": "5",
        },
        "exclude": [Function],
        "extract": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "meta": [Function],
        "nonoptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "options": [
          "1",
          "2",
          "3",
          "4",
          "5",
        ],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "default": [Function],
    "describe": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "meta": [Function],
    "nonoptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "or": [Function],
    "overwrite": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "pipe": [Function],
    "readonly": [Function],
    "refine": [Function],
    "register": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
    "unwrap": [Function],
    "~standard": {
      "validate": [Function],
      "vendor": "zod",
      "version": 1,
    },
  },
  "jsonData": ZodNullable {
    "_def": {
      "innerType": ZodUnknown {
        "_def": {
          "type": "unknown",
        },
        "_zod": {
          "computed": {},
          "constr": [Function],
          "def": {
            "type": "unknown",
          },
          "deferred": [
            [Function],
            [Function],
          ],
          "id": "unknown_dvkiluiivm",
          "parse": [Function],
          "run": [Function],
          "traits": Set {
            "ZodUnknown",
            "$ZodUnknown",
            "$ZodType",
            "ZodType",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "clone": [Function],
        "def": {
          "type": "unknown",
        },
        "default": [Function],
        "describe": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "meta": [Function],
        "nonoptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "_zod": {
      "computed": {},
      "constr": [Function],
      "def": {
        "innerType": ZodUnknown {
          "_def": {
            "type": "unknown",
          },
          "_zod": {
            "computed": {},
            "constr": [Function],
            "def": {
              "type": "unknown",
            },
            "deferred": [
              [Function],
              [Function],
            ],
            "id": "unknown_dvkiluiivm",
            "parse": [Function],
            "run": [Function],
            "traits": Set {
              "ZodUnknown",
              "$ZodUnknown",
              "$ZodType",
              "ZodType",
            },
            "version": {
              "major": 0,
              "minor": 5,
              "patch": 0,
            },
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "check": [Function],
          "clone": [Function],
          "def": {
            "type": "unknown",
          },
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "meta": [Function],
          "nonoptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "overwrite": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "readonly": [Function],
          "refine": [Function],
          "register": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
          "~standard": {
            "validate": [Function],
            "vendor": "zod",
            "version": 1,
          },
        },
        "type": "nullable",
      },
      "deferred": [
        [Function],
        [Function],
      ],
      "id": "nullable_joqpplffnl",
      "parse": [Function],
      "qin": undefined,
      "qout": undefined,
      "run": [Function],
      "traits": Set {
        "ZodNullable",
        "$ZodNullable",
        "$ZodType",
        "ZodType",
      },
      "version": {
        "major": 0,
        "minor": 5,
        "patch": 0,
      },
    },
    "and": [Function],
    "array": [Function],
    "brand": [Function],
    "catch": [Function],
    "check": [Function],
    "clone": [Function],
    "def": {
      "innerType": ZodUnknown {
        "_def": {
          "type": "unknown",
        },
        "_zod": {
          "computed": {},
          "constr": [Function],
          "def": {
            "type": "unknown",
          },
          "deferred": [
            [Function],
            [Function],
          ],
          "id": "unknown_dvkiluiivm",
          "parse": [Function],
          "run": [Function],
          "traits": Set {
            "ZodUnknown",
            "$ZodUnknown",
            "$ZodType",
            "ZodType",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "clone": [Function],
        "def": {
          "type": "unknown",
        },
        "default": [Function],
        "describe": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "meta": [Function],
        "nonoptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "default": [Function],
    "describe": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "meta": [Function],
    "nonoptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "or": [Function],
    "overwrite": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "pipe": [Function],
    "readonly": [Function],
    "refine": [Function],
    "register": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
    "unwrap": [Function],
    "~standard": {
      "validate": [Function],
      "vendor": "zod",
      "version": 1,
    },
  },
  "updatedAt": ZodNullable {
    "_def": {
      "innerType": ZodISODateTime {
        "_def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "_zod": {
          "check": [Function],
          "computed": {
            "format": "datetime",
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          },
          "constr": [Function],
          "def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "deferred": [],
          "id": "string_jbvnxdfzzn",
          "onattach": [Function],
          "parse": [Function],
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "run": [Function],
          "traits": Set {
            "ZodISODateTime",
            "$ZodISODateTime",
            "$ZodStringFormat",
            "$ZodCheckStringFormat",
            "$ZodCheck",
            "$ZodString",
            "$ZodType",
            "ZodStringFormat",
            "ZodString",
            "ZodType",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "base64": [Function],
        "base64url": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "cidrv4": [Function],
        "cidrv6": [Function],
        "clone": [Function],
        "cuid": [Function],
        "cuid2": [Function],
        "date": [Function],
        "datetime": [Function],
        "def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "default": [Function],
        "describe": [Function],
        "duration": [Function],
        "e164": [Function],
        "email": [Function],
        "emoji": [Function],
        "endsWith": [Function],
        "format": "datetime",
        "guid": [Function],
        "includes": [Function],
        "ipv4": [Function],
        "ipv6": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "jwt": [Function],
        "ksuid": [Function],
        "length": [Function],
        "lowercase": [Function],
        "max": [Function],
        "maxLength": null,
        "meta": [Function],
        "min": [Function],
        "minLength": null,
        "nanoid": [Function],
        "nonempty": [Function],
        "nonoptional": [Function],
        "normalize": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "regex": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "startsWith": [Function],
        "superRefine": [Function],
        "time": [Function],
        "toLowerCase": [Function],
        "toUpperCase": [Function],
        "transform": [Function],
        "trim": [Function],
        "ulid": [Function],
        "uppercase": [Function],
        "url": [Function],
        "uuid": [Function],
        "uuidv4": [Function],
        "uuidv6": [Function],
        "uuidv7": [Function],
        "xid": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "_zod": {
      "computed": {},
      "constr": [Function],
      "def": {
        "innerType": ZodISODateTime {
          "_def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "_zod": {
            "check": [Function],
            "computed": {
              "format": "datetime",
              "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            },
            "constr": [Function],
            "def": {
              "check": "string_format",
              "format": "datetime",
              "local": false,
              "offset": true,
              "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
              "precision": null,
              "type": "string",
            },
            "deferred": [],
            "id": "string_jbvnxdfzzn",
            "onattach": [Function],
            "parse": [Function],
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "run": [Function],
            "traits": Set {
              "ZodISODateTime",
              "$ZodISODateTime",
              "$ZodStringFormat",
              "$ZodCheckStringFormat",
              "$ZodCheck",
              "$ZodString",
              "$ZodType",
              "ZodStringFormat",
              "ZodString",
              "ZodType",
            },
            "version": {
              "major": 0,
              "minor": 5,
              "patch": 0,
            },
          },
          "and": [Function],
          "array": [Function],
          "base64": [Function],
          "base64url": [Function],
          "brand": [Function],
          "catch": [Function],
          "check": [Function],
          "cidrv4": [Function],
          "cidrv6": [Function],
          "clone": [Function],
          "cuid": [Function],
          "cuid2": [Function],
          "date": [Function],
          "datetime": [Function],
          "def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "default": [Function],
          "describe": [Function],
          "duration": [Function],
          "e164": [Function],
          "email": [Function],
          "emoji": [Function],
          "endsWith": [Function],
          "format": "datetime",
          "guid": [Function],
          "includes": [Function],
          "ipv4": [Function],
          "ipv6": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "jwt": [Function],
          "ksuid": [Function],
          "length": [Function],
          "lowercase": [Function],
          "max": [Function],
          "maxLength": null,
          "meta": [Function],
          "min": [Function],
          "minLength": null,
          "nanoid": [Function],
          "nonempty": [Function],
          "nonoptional": [Function],
          "normalize": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "overwrite": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "readonly": [Function],
          "refine": [Function],
          "regex": [Function],
          "register": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "startsWith": [Function],
          "superRefine": [Function],
          "time": [Function],
          "toLowerCase": [Function],
          "toUpperCase": [Function],
          "transform": [Function],
          "trim": [Function],
          "ulid": [Function],
          "uppercase": [Function],
          "url": [Function],
          "uuid": [Function],
          "uuidv4": [Function],
          "uuidv6": [Function],
          "uuidv7": [Function],
          "xid": [Function],
          "~standard": {
            "validate": [Function],
            "vendor": "zod",
            "version": 1,
          },
        },
        "type": "nullable",
      },
      "deferred": [
        [Function],
        [Function],
      ],
      "id": "nullable_vyhrtrtqgn",
      "parse": [Function],
      "pattern": /\\^\\(\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\|null\\)\\$/,
      "qin": undefined,
      "qout": undefined,
      "run": [Function],
      "traits": Set {
        "ZodNullable",
        "$ZodNullable",
        "$ZodType",
        "ZodType",
      },
      "version": {
        "major": 0,
        "minor": 5,
        "patch": 0,
      },
    },
    "and": [Function],
    "array": [Function],
    "brand": [Function],
    "catch": [Function],
    "check": [Function],
    "clone": [Function],
    "def": {
      "innerType": ZodISODateTime {
        "_def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "_zod": {
          "check": [Function],
          "computed": {
            "format": "datetime",
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          },
          "constr": [Function],
          "def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "deferred": [],
          "id": "string_jbvnxdfzzn",
          "onattach": [Function],
          "parse": [Function],
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "run": [Function],
          "traits": Set {
            "ZodISODateTime",
            "$ZodISODateTime",
            "$ZodStringFormat",
            "$ZodCheckStringFormat",
            "$ZodCheck",
            "$ZodString",
            "$ZodType",
            "ZodStringFormat",
            "ZodString",
            "ZodType",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "base64": [Function],
        "base64url": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "cidrv4": [Function],
        "cidrv6": [Function],
        "clone": [Function],
        "cuid": [Function],
        "cuid2": [Function],
        "date": [Function],
        "datetime": [Function],
        "def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "default": [Function],
        "describe": [Function],
        "duration": [Function],
        "e164": [Function],
        "email": [Function],
        "emoji": [Function],
        "endsWith": [Function],
        "format": "datetime",
        "guid": [Function],
        "includes": [Function],
        "ipv4": [Function],
        "ipv6": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "jwt": [Function],
        "ksuid": [Function],
        "length": [Function],
        "lowercase": [Function],
        "max": [Function],
        "maxLength": null,
        "meta": [Function],
        "min": [Function],
        "minLength": null,
        "nanoid": [Function],
        "nonempty": [Function],
        "nonoptional": [Function],
        "normalize": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "regex": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "startsWith": [Function],
        "superRefine": [Function],
        "time": [Function],
        "toLowerCase": [Function],
        "toUpperCase": [Function],
        "transform": [Function],
        "trim": [Function],
        "ulid": [Function],
        "uppercase": [Function],
        "url": [Function],
        "uuid": [Function],
        "uuidv4": [Function],
        "uuidv6": [Function],
        "uuidv7": [Function],
        "xid": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "default": [Function],
    "describe": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "meta": [Function],
    "nonoptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "or": [Function],
    "overwrite": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "pipe": [Function],
    "readonly": [Function],
    "refine": [Function],
    "register": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
    "unwrap": [Function],
    "~standard": {
      "validate": [Function],
      "vendor": "zod",
      "version": 1,
    },
  },
}
`;

exports[`extra::MyEnum > has the expected values 1`] = `
{
  "1": "1",
  "2": "2",
  "3": "3",
  "4": "4",
  "5": "5",
}
`;

exports[`extra::UpdateMyType > has the expected shape 1`] = `
{
  "enumTest": ZodNullable {
    "_def": {
      "innerType": ZodEnum {
        "_def": {
          "entries": {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
          },
          "type": "enum",
        },
        "_zod": {
          "computed": {},
          "constr": [Function],
          "def": {
            "entries": {
              "1": "1",
              "2": "2",
              "3": "3",
              "4": "4",
              "5": "5",
            },
            "type": "enum",
          },
          "deferred": [
            [Function],
            [Function],
          ],
          "id": "enum_teevqaigaf",
          "parse": [Function],
          "pattern": /\\^\\(1\\|2\\|3\\|4\\|5\\)\\$/,
          "run": [Function],
          "traits": Set {
            "ZodEnum",
            "$ZodEnum",
            "$ZodType",
            "ZodType",
          },
          "values": Set {
            "1",
            "2",
            "3",
            "4",
            "5",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "clone": [Function],
        "def": {
          "entries": {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
          },
          "type": "enum",
        },
        "default": [Function],
        "describe": [Function],
        "enum": {
          "1": "1",
          "2": "2",
          "3": "3",
          "4": "4",
          "5": "5",
        },
        "exclude": [Function],
        "extract": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "meta": [Function],
        "nonoptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "options": [
          "1",
          "2",
          "3",
          "4",
          "5",
        ],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "_zod": {
      "computed": {},
      "constr": [Function],
      "def": {
        "innerType": ZodEnum {
          "_def": {
            "entries": {
              "1": "1",
              "2": "2",
              "3": "3",
              "4": "4",
              "5": "5",
            },
            "type": "enum",
          },
          "_zod": {
            "computed": {},
            "constr": [Function],
            "def": {
              "entries": {
                "1": "1",
                "2": "2",
                "3": "3",
                "4": "4",
                "5": "5",
              },
              "type": "enum",
            },
            "deferred": [
              [Function],
              [Function],
            ],
            "id": "enum_teevqaigaf",
            "parse": [Function],
            "pattern": /\\^\\(1\\|2\\|3\\|4\\|5\\)\\$/,
            "run": [Function],
            "traits": Set {
              "ZodEnum",
              "$ZodEnum",
              "$ZodType",
              "ZodType",
            },
            "values": Set {
              "1",
              "2",
              "3",
              "4",
              "5",
            },
            "version": {
              "major": 0,
              "minor": 5,
              "patch": 0,
            },
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "check": [Function],
          "clone": [Function],
          "def": {
            "entries": {
              "1": "1",
              "2": "2",
              "3": "3",
              "4": "4",
              "5": "5",
            },
            "type": "enum",
          },
          "default": [Function],
          "describe": [Function],
          "enum": {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
          },
          "exclude": [Function],
          "extract": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "meta": [Function],
          "nonoptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "options": [
            "1",
            "2",
            "3",
            "4",
            "5",
          ],
          "or": [Function],
          "overwrite": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "readonly": [Function],
          "refine": [Function],
          "register": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
          "~standard": {
            "validate": [Function],
            "vendor": "zod",
            "version": 1,
          },
        },
        "type": "nullable",
      },
      "deferred": [
        [Function],
        [Function],
      ],
      "id": "nullable_vxmisgwwkz",
      "parse": [Function],
      "pattern": /\\^\\(\\(1\\|2\\|3\\|4\\|5\\)\\|null\\)\\$/,
      "qin": undefined,
      "qout": undefined,
      "run": [Function],
      "traits": Set {
        "ZodNullable",
        "$ZodNullable",
        "$ZodType",
        "ZodType",
      },
      "values": Set {
        "1",
        "2",
        "3",
        "4",
        "5",
        null,
      },
      "version": {
        "major": 0,
        "minor": 5,
        "patch": 0,
      },
    },
    "and": [Function],
    "array": [Function],
    "brand": [Function],
    "catch": [Function],
    "check": [Function],
    "clone": [Function],
    "def": {
      "innerType": ZodEnum {
        "_def": {
          "entries": {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
          },
          "type": "enum",
        },
        "_zod": {
          "computed": {},
          "constr": [Function],
          "def": {
            "entries": {
              "1": "1",
              "2": "2",
              "3": "3",
              "4": "4",
              "5": "5",
            },
            "type": "enum",
          },
          "deferred": [
            [Function],
            [Function],
          ],
          "id": "enum_teevqaigaf",
          "parse": [Function],
          "pattern": /\\^\\(1\\|2\\|3\\|4\\|5\\)\\$/,
          "run": [Function],
          "traits": Set {
            "ZodEnum",
            "$ZodEnum",
            "$ZodType",
            "ZodType",
          },
          "values": Set {
            "1",
            "2",
            "3",
            "4",
            "5",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "clone": [Function],
        "def": {
          "entries": {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
          },
          "type": "enum",
        },
        "default": [Function],
        "describe": [Function],
        "enum": {
          "1": "1",
          "2": "2",
          "3": "3",
          "4": "4",
          "5": "5",
        },
        "exclude": [Function],
        "extract": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "meta": [Function],
        "nonoptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "options": [
          "1",
          "2",
          "3",
          "4",
          "5",
        ],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "default": [Function],
    "describe": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "meta": [Function],
    "nonoptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "or": [Function],
    "overwrite": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "pipe": [Function],
    "readonly": [Function],
    "refine": [Function],
    "register": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
    "unwrap": [Function],
    "~standard": {
      "validate": [Function],
      "vendor": "zod",
      "version": 1,
    },
  },
  "jsonData": ZodNullable {
    "_def": {
      "innerType": ZodUnknown {
        "_def": {
          "type": "unknown",
        },
        "_zod": {
          "computed": {},
          "constr": [Function],
          "def": {
            "type": "unknown",
          },
          "deferred": [
            [Function],
            [Function],
          ],
          "id": "unknown_utzarvvgum",
          "parse": [Function],
          "run": [Function],
          "traits": Set {
            "ZodUnknown",
            "$ZodUnknown",
            "$ZodType",
            "ZodType",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "clone": [Function],
        "def": {
          "type": "unknown",
        },
        "default": [Function],
        "describe": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "meta": [Function],
        "nonoptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "_zod": {
      "computed": {},
      "constr": [Function],
      "def": {
        "innerType": ZodUnknown {
          "_def": {
            "type": "unknown",
          },
          "_zod": {
            "computed": {},
            "constr": [Function],
            "def": {
              "type": "unknown",
            },
            "deferred": [
              [Function],
              [Function],
            ],
            "id": "unknown_utzarvvgum",
            "parse": [Function],
            "run": [Function],
            "traits": Set {
              "ZodUnknown",
              "$ZodUnknown",
              "$ZodType",
              "ZodType",
            },
            "version": {
              "major": 0,
              "minor": 5,
              "patch": 0,
            },
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "check": [Function],
          "clone": [Function],
          "def": {
            "type": "unknown",
          },
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "meta": [Function],
          "nonoptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "overwrite": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "readonly": [Function],
          "refine": [Function],
          "register": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
          "~standard": {
            "validate": [Function],
            "vendor": "zod",
            "version": 1,
          },
        },
        "type": "nullable",
      },
      "deferred": [
        [Function],
        [Function],
      ],
      "id": "nullable_oxuujcokdm",
      "parse": [Function],
      "qin": undefined,
      "qout": undefined,
      "run": [Function],
      "traits": Set {
        "ZodNullable",
        "$ZodNullable",
        "$ZodType",
        "ZodType",
      },
      "version": {
        "major": 0,
        "minor": 5,
        "patch": 0,
      },
    },
    "and": [Function],
    "array": [Function],
    "brand": [Function],
    "catch": [Function],
    "check": [Function],
    "clone": [Function],
    "def": {
      "innerType": ZodUnknown {
        "_def": {
          "type": "unknown",
        },
        "_zod": {
          "computed": {},
          "constr": [Function],
          "def": {
            "type": "unknown",
          },
          "deferred": [
            [Function],
            [Function],
          ],
          "id": "unknown_utzarvvgum",
          "parse": [Function],
          "run": [Function],
          "traits": Set {
            "ZodUnknown",
            "$ZodUnknown",
            "$ZodType",
            "ZodType",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "clone": [Function],
        "def": {
          "type": "unknown",
        },
        "default": [Function],
        "describe": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "meta": [Function],
        "nonoptional": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "default": [Function],
    "describe": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "meta": [Function],
    "nonoptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "or": [Function],
    "overwrite": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "pipe": [Function],
    "readonly": [Function],
    "refine": [Function],
    "register": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
    "unwrap": [Function],
    "~standard": {
      "validate": [Function],
      "vendor": "zod",
      "version": 1,
    },
  },
  "updatedAt": ZodNullable {
    "_def": {
      "innerType": ZodISODateTime {
        "_def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "_zod": {
          "check": [Function],
          "computed": {
            "format": "datetime",
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          },
          "constr": [Function],
          "def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "deferred": [],
          "id": "string_psmigizjtl",
          "onattach": [Function],
          "parse": [Function],
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "run": [Function],
          "traits": Set {
            "ZodISODateTime",
            "$ZodISODateTime",
            "$ZodStringFormat",
            "$ZodCheckStringFormat",
            "$ZodCheck",
            "$ZodString",
            "$ZodType",
            "ZodStringFormat",
            "ZodString",
            "ZodType",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "base64": [Function],
        "base64url": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "cidrv4": [Function],
        "cidrv6": [Function],
        "clone": [Function],
        "cuid": [Function],
        "cuid2": [Function],
        "date": [Function],
        "datetime": [Function],
        "def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "default": [Function],
        "describe": [Function],
        "duration": [Function],
        "e164": [Function],
        "email": [Function],
        "emoji": [Function],
        "endsWith": [Function],
        "format": "datetime",
        "guid": [Function],
        "includes": [Function],
        "ipv4": [Function],
        "ipv6": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "jwt": [Function],
        "ksuid": [Function],
        "length": [Function],
        "lowercase": [Function],
        "max": [Function],
        "maxLength": null,
        "meta": [Function],
        "min": [Function],
        "minLength": null,
        "nanoid": [Function],
        "nonempty": [Function],
        "nonoptional": [Function],
        "normalize": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "regex": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "startsWith": [Function],
        "superRefine": [Function],
        "time": [Function],
        "toLowerCase": [Function],
        "toUpperCase": [Function],
        "transform": [Function],
        "trim": [Function],
        "ulid": [Function],
        "uppercase": [Function],
        "url": [Function],
        "uuid": [Function],
        "uuidv4": [Function],
        "uuidv6": [Function],
        "uuidv7": [Function],
        "xid": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "_zod": {
      "computed": {},
      "constr": [Function],
      "def": {
        "innerType": ZodISODateTime {
          "_def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "_zod": {
            "check": [Function],
            "computed": {
              "format": "datetime",
              "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            },
            "constr": [Function],
            "def": {
              "check": "string_format",
              "format": "datetime",
              "local": false,
              "offset": true,
              "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
              "precision": null,
              "type": "string",
            },
            "deferred": [],
            "id": "string_psmigizjtl",
            "onattach": [Function],
            "parse": [Function],
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "run": [Function],
            "traits": Set {
              "ZodISODateTime",
              "$ZodISODateTime",
              "$ZodStringFormat",
              "$ZodCheckStringFormat",
              "$ZodCheck",
              "$ZodString",
              "$ZodType",
              "ZodStringFormat",
              "ZodString",
              "ZodType",
            },
            "version": {
              "major": 0,
              "minor": 5,
              "patch": 0,
            },
          },
          "and": [Function],
          "array": [Function],
          "base64": [Function],
          "base64url": [Function],
          "brand": [Function],
          "catch": [Function],
          "check": [Function],
          "cidrv4": [Function],
          "cidrv6": [Function],
          "clone": [Function],
          "cuid": [Function],
          "cuid2": [Function],
          "date": [Function],
          "datetime": [Function],
          "def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "default": [Function],
          "describe": [Function],
          "duration": [Function],
          "e164": [Function],
          "email": [Function],
          "emoji": [Function],
          "endsWith": [Function],
          "format": "datetime",
          "guid": [Function],
          "includes": [Function],
          "ipv4": [Function],
          "ipv6": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "jwt": [Function],
          "ksuid": [Function],
          "length": [Function],
          "lowercase": [Function],
          "max": [Function],
          "maxLength": null,
          "meta": [Function],
          "min": [Function],
          "minLength": null,
          "nanoid": [Function],
          "nonempty": [Function],
          "nonoptional": [Function],
          "normalize": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "overwrite": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "readonly": [Function],
          "refine": [Function],
          "regex": [Function],
          "register": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "startsWith": [Function],
          "superRefine": [Function],
          "time": [Function],
          "toLowerCase": [Function],
          "toUpperCase": [Function],
          "transform": [Function],
          "trim": [Function],
          "ulid": [Function],
          "uppercase": [Function],
          "url": [Function],
          "uuid": [Function],
          "uuidv4": [Function],
          "uuidv6": [Function],
          "uuidv7": [Function],
          "xid": [Function],
          "~standard": {
            "validate": [Function],
            "vendor": "zod",
            "version": 1,
          },
        },
        "type": "nullable",
      },
      "deferred": [
        [Function],
        [Function],
      ],
      "id": "nullable_tpjemrcryq",
      "parse": [Function],
      "pattern": /\\^\\(\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\|null\\)\\$/,
      "qin": undefined,
      "qout": undefined,
      "run": [Function],
      "traits": Set {
        "ZodNullable",
        "$ZodNullable",
        "$ZodType",
        "ZodType",
      },
      "version": {
        "major": 0,
        "minor": 5,
        "patch": 0,
      },
    },
    "and": [Function],
    "array": [Function],
    "brand": [Function],
    "catch": [Function],
    "check": [Function],
    "clone": [Function],
    "def": {
      "innerType": ZodISODateTime {
        "_def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "_zod": {
          "check": [Function],
          "computed": {
            "format": "datetime",
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          },
          "constr": [Function],
          "def": {
            "check": "string_format",
            "format": "datetime",
            "local": false,
            "offset": true,
            "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
            "precision": null,
            "type": "string",
          },
          "deferred": [],
          "id": "string_psmigizjtl",
          "onattach": [Function],
          "parse": [Function],
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "run": [Function],
          "traits": Set {
            "ZodISODateTime",
            "$ZodISODateTime",
            "$ZodStringFormat",
            "$ZodCheckStringFormat",
            "$ZodCheck",
            "$ZodString",
            "$ZodType",
            "ZodStringFormat",
            "ZodString",
            "ZodType",
          },
          "version": {
            "major": 0,
            "minor": 5,
            "patch": 0,
          },
        },
        "and": [Function],
        "array": [Function],
        "base64": [Function],
        "base64url": [Function],
        "brand": [Function],
        "catch": [Function],
        "check": [Function],
        "cidrv4": [Function],
        "cidrv6": [Function],
        "clone": [Function],
        "cuid": [Function],
        "cuid2": [Function],
        "date": [Function],
        "datetime": [Function],
        "def": {
          "check": "string_format",
          "format": "datetime",
          "local": false,
          "offset": true,
          "pattern": /\\^\\(\\(\\\\d\\\\d\\[2468\\]\\[048\\]\\|\\\\d\\\\d\\[13579\\]\\[26\\]\\|\\\\d\\\\d0\\[48\\]\\|\\[02468\\]\\[048\\]00\\|\\[13579\\]\\[26\\]00\\)-02-29\\|\\\\d\\{4\\}-\\(\\(0\\[13578\\]\\|1\\[02\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|3\\[01\\]\\)\\|\\(0\\[469\\]\\|11\\)-\\(0\\[1-9\\]\\|\\[12\\]\\\\d\\|30\\)\\|\\(02\\)-\\(0\\[1-9\\]\\|1\\\\d\\|2\\[0-8\\]\\)\\)\\)T\\(\\[01\\]\\\\d\\|2\\[0-3\\]\\):\\[0-5\\]\\\\d:\\[0-5\\]\\\\d\\(\\\\\\.\\\\d\\+\\)\\?\\(Z\\|\\(\\[\\+-\\]\\\\d\\{2\\}:\\?\\\\d\\{2\\}\\)\\)\\$/,
          "precision": null,
          "type": "string",
        },
        "default": [Function],
        "describe": [Function],
        "duration": [Function],
        "e164": [Function],
        "email": [Function],
        "emoji": [Function],
        "endsWith": [Function],
        "format": "datetime",
        "guid": [Function],
        "includes": [Function],
        "ipv4": [Function],
        "ipv6": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "jwt": [Function],
        "ksuid": [Function],
        "length": [Function],
        "lowercase": [Function],
        "max": [Function],
        "maxLength": null,
        "meta": [Function],
        "min": [Function],
        "minLength": null,
        "nanoid": [Function],
        "nonempty": [Function],
        "nonoptional": [Function],
        "normalize": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "or": [Function],
        "overwrite": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "pipe": [Function],
        "readonly": [Function],
        "refine": [Function],
        "regex": [Function],
        "register": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "spa": [Function],
        "startsWith": [Function],
        "superRefine": [Function],
        "time": [Function],
        "toLowerCase": [Function],
        "toUpperCase": [Function],
        "transform": [Function],
        "trim": [Function],
        "ulid": [Function],
        "uppercase": [Function],
        "url": [Function],
        "uuid": [Function],
        "uuidv4": [Function],
        "uuidv6": [Function],
        "uuidv7": [Function],
        "xid": [Function],
        "~standard": {
          "validate": [Function],
          "vendor": "zod",
          "version": 1,
        },
      },
      "type": "nullable",
    },
    "default": [Function],
    "describe": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "meta": [Function],
    "nonoptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "or": [Function],
    "overwrite": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "pipe": [Function],
    "readonly": [Function],
    "refine": [Function],
    "register": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
    "unwrap": [Function],
    "~standard": {
      "validate": [Function],
      "vendor": "zod",
      "version": 1,
    },
  },
}
`;
